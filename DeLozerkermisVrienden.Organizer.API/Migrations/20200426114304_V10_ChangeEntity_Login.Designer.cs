// <auto-generated />
using System;
using DeLozerkermisVrienden.Organizer.API.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DeLozerkermisVrienden.Organizer.API.Migrations
{
    [DbContext(typeof(OrganizerContext))]
    [Migration("20200426114304_V10_ChangeEntity_Login")]
    partial class V10_ChangeEntity_Login
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Betaalmethode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AantalDagenVroegerAfsluiten")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<string>("Opmerking")
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Volgorde")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Betaalmethoden");

                    b.HasData(
                        new
                        {
                            Id = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            Naam = "Contant",
                            Opmerking = "U betaalt bij het inchecken op de dag van het evenement zelf OF U betaalt ervoor aan een lid van de vereniging.",
                            Volgorde = 1
                        },
                        new
                        {
                            Id = new Guid("a833e881-dbdb-4a09-a718-a44d1f3ce0ea"),
                            AantalDagenVroegerAfsluiten = 5,
                            Naam = "Overschrijving",
                            Volgorde = 2
                        },
                        new
                        {
                            Id = new Guid("608f19f1-05a2-4b56-96df-ad7af75d7893"),
                            Naam = "Te verwijderen",
                            Volgorde = 10
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Betaaltransactie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Bedrag")
                        .HasColumnType("decimal(7,2)");

                    b.Property<Guid?>("BetaalmethodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatumBetaling")
                        .HasColumnType("datetime2");

                    b.Property<string>("GestructureerdeMededeling")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<Guid?>("InschrijvingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("VerantwoordelijkeBetaling")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasKey("Id");

                    b.HasIndex("BetaalmethodeId");

                    b.HasIndex("InschrijvingsId");

                    b.HasIndex("LidId");

                    b.ToTable("Betaaltransacties");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e2298ab9-66b2-4bbe-afd3-1406c42c6825"),
                            Bedrag = 8m,
                            BetaalmethodeId = new Guid("a833e881-dbdb-4a09-a718-a44d1f3ce0ea"),
                            DatumBetaling = new DateTime(2020, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GestructureerdeMededeling = "123123412345",
                            InschrijvingsId = new Guid("a17c29b6-4cc2-4cc8-9a84-592ae2bafbc7"),
                            LidId = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            VerantwoordelijkeBetaling = "Thibaut De Poortere"
                        },
                        new
                        {
                            Id = new Guid("06b1a479-ad0d-415b-b95e-a594c930879e"),
                            Bedrag = 8m,
                            BetaalmethodeId = new Guid("a833e881-dbdb-4a09-a718-a44d1f3ce0ea"),
                            DatumBetaling = new DateTime(2020, 7, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            GestructureerdeMededeling = "123123412345",
                            InschrijvingsId = new Guid("a17c29b6-4cc2-4cc8-9a84-592ae2bafbc7"),
                            LidId = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            VerantwoordelijkeBetaling = "Charlotte De Poortere"
                        },
                        new
                        {
                            Id = new Guid("84ec6183-4f95-4e8b-bea3-81704dc24bb7"),
                            Bedrag = 10m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 5, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c565df1d-c604-4ea5-b2da-aedad6e924bf"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Carine De Poortere"
                        },
                        new
                        {
                            Id = new Guid("601c39e9-ee24-4a23-8a05-036705b0cf91"),
                            Bedrag = 2m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("945fa969-22f7-4bf3-8054-eae61f41ae6a"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Marc De Kimpe"
                        },
                        new
                        {
                            Id = new Guid("5cc00408-02a2-4a86-a88b-d6b3f0147a48"),
                            Bedrag = 30m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("945fa969-22f7-4bf3-8054-eae61f41ae6a"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Te verwijderen"
                        },
                        new
                        {
                            Id = new Guid("68cb7db0-4af5-4469-9838-099ee2b1c8c0"),
                            Bedrag = 30m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c7a1c924-711b-4c81-962d-b3a96ffd2e8a"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Te verwijderen door verwijderen inschrijving"
                        },
                        new
                        {
                            Id = new Guid("8c72a872-c977-4574-9abc-8c9e911dc4a5"),
                            Bedrag = 30m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c1dea00c-0513-4ebf-8c01-306c6533a270"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Te verwijderen door verwijderen Evenement"
                        },
                        new
                        {
                            Id = new Guid("a4f5e57b-4ec3-4b57-8ad7-561f406bde12"),
                            Bedrag = 30m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("bfebd9b2-7c28-446a-9483-a281550212ec"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Te verwijderen door verwijderen EvenementGroep"
                        },
                        new
                        {
                            Id = new Guid("35009a2b-19df-484d-9cd7-e6f688c23b95"),
                            Bedrag = 30m,
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumBetaling = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("bfebd9b2-7c28-446a-9483-a281550212ec"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            VerantwoordelijkeBetaling = "Te verwijderen door verwijderen EvenementGroep"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CheckInMoment")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("InschrijvingsId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LidId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("InschrijvingsId");

                    b.HasIndex("LidId");

                    b.ToTable("CheckIns");

                    b.HasData(
                        new
                        {
                            Id = new Guid("195925fe-c828-4572-a039-4d0f2bea8a58"),
                            CheckInMoment = new DateTime(2020, 2, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("a17c29b6-4cc2-4cc8-9a84-592ae2bafbc7"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa")
                        },
                        new
                        {
                            Id = new Guid("7a439907-d6a5-477b-93d9-e34573f2c8d4"),
                            CheckInMoment = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c7a1c924-711b-4c81-962d-b3a96ffd2e8a")
                        },
                        new
                        {
                            Id = new Guid("18ccc083-02f9-4487-9935-18ae25d12100"),
                            CheckInMoment = new DateTime(2020, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c7a1c924-711b-4c81-962d-b3a96ffd2e8a")
                        },
                        new
                        {
                            Id = new Guid("cadad060-3162-45cf-9076-fc7dfbfc6ddd"),
                            CheckInMoment = new DateTime(2020, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("c1dea00c-0513-4ebf-8c01-306c6533a270"),
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa")
                        },
                        new
                        {
                            Id = new Guid("b950c3d8-9ba5-4588-8781-a2e031389616"),
                            CheckInMoment = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            InschrijvingsId = new Guid("bfebd9b2-7c28-446a-9483-a281550212ec")
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Evenement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatumEindeEvenement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumEindeInschrijvingen")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumStartEvenement")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumStartInschrijvingen")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("EvenementCategorieId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("EvenementCategorieId");

                    b.ToTable("Evenementen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            DatumEindeEvenement = new DateTime(2020, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(2020, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 9, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(2020, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvenementCategorieId = new Guid("f13a3c7e-ead7-42d7-9d09-f3e2c8e292d1"),
                            Naam = "Rommelmarkt 2020"
                        },
                        new
                        {
                            Id = new Guid("6bce3045-0e7e-4d42-992a-196361d1266b"),
                            DatumEindeEvenement = new DateTime(2020, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(2020, 9, 23, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 9, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(2020, 6, 26, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvenementCategorieId = new Guid("f13a3c7e-ead7-42d7-9d09-f3e2c8e292d1"),
                            Naam = "Brunch 2020"
                        },
                        new
                        {
                            Id = new Guid("08df868b-7173-4355-befb-7cb16b696444"),
                            DatumEindeEvenement = new DateTime(2020, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(2020, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 6, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(2020, 5, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvenementCategorieId = new Guid("c971a053-e944-45ba-9307-229b07c74041"),
                            Naam = "Ontbijtmanden vaderdag 2020"
                        },
                        new
                        {
                            Id = new Guid("9f04dc8e-b95b-4f0a-81bb-10bacbeed553"),
                            DatumEindeEvenement = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Bloemenfeest 2020"
                        },
                        new
                        {
                            Id = new Guid("254df418-2646-44e6-9ae6-78ebd29475f8"),
                            DatumEindeEvenement = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Naam = "Te verwijderen"
                        },
                        new
                        {
                            Id = new Guid("fcaa7d8a-4b3a-4282-962e-2e1bf90d3448"),
                            DatumEindeEvenement = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumEindeInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartEvenement = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DatumStartInschrijvingen = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EvenementCategorieId = new Guid("77d78a2a-4790-4394-9c31-05ae08108628"),
                            Naam = "Te verwijderen door verwijderen evenementGroep"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.EvenementCategorie", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("EvenementCategorieen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f13a3c7e-ead7-42d7-9d09-f3e2c8e292d1"),
                            Naam = "Lozerkermis"
                        },
                        new
                        {
                            Id = new Guid("c971a053-e944-45ba-9307-229b07c74041"),
                            Naam = "Vader-Moederdag"
                        },
                        new
                        {
                            Id = new Guid("77d78a2a-4790-4394-9c31-05ae08108628"),
                            Naam = "Te verwijderen"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijving", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AantalAanhangwagens")
                        .HasColumnType("int");

                    b.Property<int>("AantalMeter")
                        .HasColumnType("int");

                    b.Property<int?>("AantalMobilhomes")
                        .HasColumnType("int");

                    b.Property<int?>("AantalWagens")
                        .HasColumnType("int");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<Guid?>("BetaalmethodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DatumInschrijving")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid?>("EvenementId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Gemeente")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("GestructureerdeMededeling")
                        .HasColumnType("nvarchar(12)")
                        .HasMaxLength(12);

                    b.Property<Guid?>("InschrijvingsstatusId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("LidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Meterprijs")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("MobielNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(9)")
                        .HasMaxLength(9);

                    b.Property<string>("Opmerking")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Postcode")
                        .IsRequired()
                        .HasColumnType("nvarchar(4)")
                        .HasMaxLength(4);

                    b.Property<string>("PrefixMobielNummer")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.Property<string>("QRCode")
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("RedenAfkeuring")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Standnummer")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("BetaalmethodeId");

                    b.HasIndex("EvenementId");

                    b.HasIndex("InschrijvingsstatusId");

                    b.HasIndex("LidId");

                    b.ToTable("Inschrijvingen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a17c29b6-4cc2-4cc8-9a84-592ae2bafbc7"),
                            AantalMeter = 16,
                            AantalWagens = 2,
                            Achternaam = "De Poortere",
                            BetaalmethodeId = new Guid("a833e881-dbdb-4a09-a718-a44d1f3ce0ea"),
                            DatumInschrijving = new DateTime(2020, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "thibaut.depoortere@student.hogent.be",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Kruisem",
                            GestructureerdeMededeling = "123123412345",
                            InschrijvingsstatusId = new Guid("4c2c40d0-c1e9-490b-afb2-5bd9607b7869"),
                            LidId = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            Meterprijs = 1m,
                            MobielNummer = "412345678",
                            Opmerking = "We staan met 2 op deze stand.",
                            Postcode = "9770",
                            PrefixMobielNummer = "+32",
                            QRCode = "a17c29b64cc24cc89a84592ae2bafbc7",
                            Voornaam = "Thibaut"
                        },
                        new
                        {
                            Id = new Guid("c565df1d-c604-4ea5-b2da-aedad6e924bf"),
                            AantalMeter = 5,
                            AantalWagens = 1,
                            Achternaam = "De Poortere",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 5, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail03@icloud.com",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Kruisem",
                            InschrijvingsstatusId = new Guid("4c2c40d0-c1e9-490b-afb2-5bd9607b7869"),
                            Meterprijs = 1m,
                            MobielNummer = "487654321",
                            Opmerking = "Ik zal bloemstukken en tuindecoratie verkopen.",
                            Postcode = "9770",
                            PrefixMobielNummer = "+32",
                            QRCode = "c565df1dc6044ea5b2daaedad6e924bf",
                            Voornaam = "Carine"
                        },
                        new
                        {
                            Id = new Guid("9b715468-6ac7-40c3-a30c-56d0a797cf45"),
                            AantalMeter = 3,
                            Achternaam = "Baert",
                            BetaalmethodeId = new Guid("a833e881-dbdb-4a09-a718-a44d1f3ce0ea"),
                            DatumInschrijving = new DateTime(2020, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail04@gmail.com",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Nederename",
                            InschrijvingsstatusId = new Guid("4c83bb5b-30b2-4ac7-9662-eab035157b86"),
                            Meterprijs = 1m,
                            MobielNummer = "412348765",
                            Postcode = "9700",
                            PrefixMobielNummer = "+32",
                            Voornaam = "Kerensa"
                        },
                        new
                        {
                            Id = new Guid("945fa969-22f7-4bf3-8054-eae61f41ae6a"),
                            AantalMeter = 4,
                            AantalWagens = 1,
                            Achternaam = "Marysse",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "klantheeftgeenmail@delozerkermisvrienden.com",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Kruisem",
                            InschrijvingsstatusId = new Guid("adb494b6-10ae-495a-9ba4-48ef04d0e29f"),
                            LidId = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            Meterprijs = 1m,
                            MobielNummer = "456873421",
                            Opmerking = "Speelgoed van reeds opgegroeide kleinkinderen.",
                            Postcode = "9750",
                            PrefixMobielNummer = "+32",
                            QRCode = "945fa96922f74bf38054eae61f41ae6a",
                            Standnummer = "235",
                            Voornaam = "Nicole"
                        },
                        new
                        {
                            Id = new Guid("8366d2f6-b8a5-4a90-8250-1e4a87e2ab06"),
                            AantalMeter = 5,
                            AantalWagens = 1,
                            Achternaam = "Marysse",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail05@gmail.com",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Antwerpen",
                            InschrijvingsstatusId = new Guid("febf6bbe-4d18-46b1-846b-eeec0581b482"),
                            Meterprijs = 1m,
                            MobielNummer = "418273645",
                            Postcode = "2000",
                            PrefixMobielNummer = "+32",
                            RedenAfkeuring = "Reeds 2x online ingeschreven met contante betaling bij inchecken, maar reeds 2x zonder enig tegenbericht niet opgedaagd. Hierdoor wordt u voor deze editie niet toegelaten.",
                            Voornaam = "Jonas"
                        },
                        new
                        {
                            Id = new Guid("c7a1c924-711b-4c81-962d-b3a96ffd2e8a"),
                            AantalMeter = 30,
                            AantalWagens = 1,
                            Achternaam = "Inschrijving",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail10@gmail.com",
                            EvenementId = new Guid("c4660a63-7e82-4e68-92c9-85f3c193f69e"),
                            Gemeente = "Gent",
                            InschrijvingsstatusId = new Guid("febf6bbe-4d18-46b1-846b-eeec0581b482"),
                            Meterprijs = 1m,
                            MobielNummer = "418273645",
                            Postcode = "9000",
                            PrefixMobielNummer = "+32",
                            RedenAfkeuring = "Te verwijderen",
                            Voornaam = "Tijdelijke"
                        },
                        new
                        {
                            Id = new Guid("c1dea00c-0513-4ebf-8c01-306c6533a270"),
                            AantalMeter = 30,
                            AantalWagens = 1,
                            Achternaam = "Inschrijving",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail11@gmail.com",
                            EvenementId = new Guid("254df418-2646-44e6-9ae6-78ebd29475f8"),
                            Gemeente = "Gent",
                            InschrijvingsstatusId = new Guid("febf6bbe-4d18-46b1-846b-eeec0581b482"),
                            Meterprijs = 1m,
                            MobielNummer = "418273645",
                            Postcode = "9000",
                            PrefixMobielNummer = "+32",
                            RedenAfkeuring = "Te verwijderen door verwijderen evenement.",
                            Voornaam = "Tijdelijke"
                        },
                        new
                        {
                            Id = new Guid("bfebd9b2-7c28-446a-9483-a281550212ec"),
                            AantalMeter = 30,
                            AantalWagens = 1,
                            Achternaam = "Inschrijving",
                            BetaalmethodeId = new Guid("574fa379-3144-49c0-b1f1-5e1514e270af"),
                            DatumInschrijving = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "verzonnenmail12@gmail.com",
                            EvenementId = new Guid("fcaa7d8a-4b3a-4282-962e-2e1bf90d3448"),
                            Gemeente = "Gent",
                            InschrijvingsstatusId = new Guid("febf6bbe-4d18-46b1-846b-eeec0581b482"),
                            Meterprijs = 1m,
                            MobielNummer = "418273645",
                            Postcode = "9000",
                            PrefixMobielNummer = "+32",
                            RedenAfkeuring = "Te verwijderen door verwijderen evenementGroep.",
                            Voornaam = "Tijdelijke"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijvingsstatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Naam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<int>("Volgorde")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Inschrijvingsstatussen");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4c83bb5b-30b2-4ac7-9662-eab035157b86"),
                            Naam = "Aangevraagd",
                            Volgorde = 1
                        },
                        new
                        {
                            Id = new Guid("4c2c40d0-c1e9-490b-afb2-5bd9607b7869"),
                            Naam = "Goedgekeurd",
                            Volgorde = 2
                        },
                        new
                        {
                            Id = new Guid("adb494b6-10ae-495a-9ba4-48ef04d0e29f"),
                            Naam = "Gepland",
                            Volgorde = 3
                        },
                        new
                        {
                            Id = new Guid("febf6bbe-4d18-46b1-846b-eeec0581b482"),
                            Naam = "Afgekeurd",
                            Volgorde = 4
                        },
                        new
                        {
                            Id = new Guid("8e7c974e-a3d3-47e6-a19b-9e5a0e1abc3e"),
                            Naam = "te verwijderen",
                            Volgorde = 5
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Lid", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Achternaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("Actief")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)")
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.ToTable("Leden");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            Achternaam = "De Poortere",
                            Actief = true,
                            Email = "thibaut.depoortere@student.hogent.be",
                            Voornaam = "Thibaut"
                        },
                        new
                        {
                            Id = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            Achternaam = "De Poortere",
                            Actief = true,
                            Email = "verzonnenmail01@gmail.com",
                            Voornaam = "Filip"
                        },
                        new
                        {
                            Id = new Guid("b7096da3-4070-43e1-99c9-ebf4a1829236"),
                            Achternaam = "Van Cauwenberghe",
                            Actief = false,
                            Email = "verzonnenmail02@outlook.com",
                            Voornaam = "Jo"
                        },
                        new
                        {
                            Id = new Guid("ce467c89-7619-45aa-be44-ec214b54aca0"),
                            Achternaam = "Te verwijderen",
                            Actief = false,
                            Email = "verzonnenmail20@outlook.com",
                            Voornaam = "Tijdelijk"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Login", b =>
                {
                    b.Property<Guid>("LidId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Wachtwoord")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LidId");

                    b.ToTable("Logins");

                    b.HasData(
                        new
                        {
                            LidId = new Guid("8ed92433-e0ca-42d5-b80c-89415991f1f2"),
                            Wachtwoord = "Hier komt een encrypted wachtwoord!"
                        },
                        new
                        {
                            LidId = new Guid("3a041df5-32a4-4d86-add2-8f0c16a407aa"),
                            Wachtwoord = "Hier komt een encrypted wachtwoord!"
                        },
                        new
                        {
                            LidId = new Guid("ce467c89-7619-45aa-be44-ec214b54aca0"),
                            Wachtwoord = "Te verwijderen door Lid"
                        });
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Nieuwsbrief", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<Guid>("EvenementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EvenementId");

                    b.ToTable("Nieuwsbrieven");
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Betaaltransactie", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Betaalmethode", "Betaalmethode")
                        .WithMany("Betaaltransacties")
                        .HasForeignKey("BetaalmethodeId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijving", "Inschrijving")
                        .WithMany("Betaaltransacties")
                        .HasForeignKey("InschrijvingsId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Lid", "Lid")
                        .WithMany("Betaaltransacties")
                        .HasForeignKey("LidId");
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.CheckIn", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijving", "Inschrijving")
                        .WithMany("CheckIns")
                        .HasForeignKey("InschrijvingsId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Lid", "Lid")
                        .WithMany("CheckIns")
                        .HasForeignKey("LidId");
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Evenement", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.EvenementCategorie", null)
                        .WithMany("Evenementen")
                        .HasForeignKey("EvenementCategorieId");
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijving", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Betaalmethode", "Betaalmethode")
                        .WithMany("Inschrijvingen")
                        .HasForeignKey("BetaalmethodeId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Evenement", "Evenement")
                        .WithMany("Inschrijvingen")
                        .HasForeignKey("EvenementId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Inschrijvingsstatus", "Inschrijvingsstatus")
                        .WithMany("Inschrijvingen")
                        .HasForeignKey("InschrijvingsstatusId");

                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Lid", "Lid")
                        .WithMany("Inschrijvingen")
                        .HasForeignKey("LidId");
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Login", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Lid", "Lid")
                        .WithOne("Login")
                        .HasForeignKey("DeLozerkermisVrienden.Organizer.API.Entities.Login", "LidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DeLozerkermisVrienden.Organizer.API.Entities.Nieuwsbrief", b =>
                {
                    b.HasOne("DeLozerkermisVrienden.Organizer.API.Entities.Evenement", "Evenement")
                        .WithMany("Nieuwsbrieven")
                        .HasForeignKey("EvenementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
